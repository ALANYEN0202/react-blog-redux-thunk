{"version":3,"sources":["utilis.js","WepAPI.js","redux/reducers/postReducer.js","component/PostFeatrues/PostFeatrues.js","constants/style.js","pages/HomePage/HomePage.js","redux/reducers/userReducer.js","pages/LoginPage/LoginPage.js","pages/SinglePage/SinglePage.js","pages/RegisterPage/RegisterPage.js","pages/AboutPage/AboutPage.js","pages/NewPostPage/NewPostPage.js","pages/UpdatePostPage/UpdatePostPage.js","component/Header/Header.js","component/App/App.js","redux/store.js","index.js"],"names":["TOKEN_NAME","setAuthToken","token","localStorage","setItem","getAuthToken","getItem","BASE_URL","getMe","fetch","headers","authorization","then","res","json","postReducer","createSlice","name","initialState","isLoadingPost","post","newPostResponse","limit","activePage","allPaginationsNumber","reducers","setIsLoadingPost","state","action","payload","setPost","clearPost","setPostResponse","clearPostResponse","setActivePage","setAllPaginationsNumber","actions","setIsDelete","getPost","id","dispatch","getSinglePage","catch","err","console","log","newPost","title","body","method","JSON","stringify","postArticle","updatePost","updateArticle","deletePost","deleteArticle","getPosts","pages","getLimitPosts","totalPostCount","get","Math","ceil","data","PostUpdate","styled","Link","PostDelete","button","PostFeatruesContainer","div","PostFeatrues","useDispatch","useSelector","store","posts","history","useHistory","to","onClick","push","MEDIA_QUERY_MD","Root","PostContainer","PostTitle","PostDate","PagesContainer","PagesButton","props","$active","PostInfo","Post","user","users","Date","createdAt","toLocaleString","Pagination","handlePagePagination","arr","i","map","number","HomePage","useEffect","length","userReducer","isLoadingLogin","registerResponse","errorMessage","setIsLoadingLogin","setUser","setRegisterResponse","setErrorMessage","clearUser","postRegister","nickname","username","password","register","ok","message","userLogin","login","ErrorMessage","Button","LoginContainer","LoginPage","useState","setUsername","setPassword","onSubmit","e","preventDefault","style","marginRight","value","onChange","target","type","PostContext","Loading","SinglePost","singlePost","isLoading","SinglePage","useParams","Form","form","Input","input","InputText","span","FormSubmit","RegisterPage","setNickname","AboutContainer","AboutTitle","AboutContext","Article","Img","img","AboutPage","src","InputTitle","TextArea","textarea","SubmitButton","NewPostPage","setTitle","textArea","setTextArea","placeholder","rows","UpdatePost","handleUpdateSubmit","UpdatePage","HeaderContainer","Board","h1","NavbarList","Nav","Logout","LeftContainer","Header","location","useLocation","pathname","App","exact","path","configureStore","reducer","ReactDOM","render","theme","colors","primary_green","primary_red","primary_white","document","getElementById"],"mappings":"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","file":"static/js/main.188c074f.chunk.js","sourcesContent":["const TOKEN_NAME = \"token\";\n\nexport const setAuthToken = (token) => {\n  localStorage.setItem(TOKEN_NAME, token);\n};\n\nexport const getAuthToken = () => {\n  return localStorage.getItem(TOKEN_NAME);\n};\n","import { getAuthToken } from \"./utilis\";\n\nconst BASE_URL = \"https://student-json-api.lidemy.me\";\n\nexport const getPosts = () => {\n  return fetch(`${BASE_URL}/posts`).then((res) => res.json());\n};\n\nexport const getLimitPosts = (limit, pages) => {\n  return fetch(\n    `${BASE_URL}/posts?_sort=createdAt&_order=desc&_limit=${limit}&_page=${pages}`\n  ).then((res) => res)\n};\n\nexport const getSinglePage = (id) => {\n  return fetch(`${BASE_URL}/posts/${id}`).then((res) => res.json());\n};\n\nexport const login = (username, password) => {\n  return fetch(`${BASE_URL}/login`, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      username,\n      password,\n    }),\n  }).then((res) => res.json());\n};\n\nexport const getMe = () => {\n  const token = getAuthToken();\n  return fetch(`${BASE_URL}/me`, {\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  }).then((res) => res.json());\n};\n\nexport const register = (nickname, username, password) => {\n  return fetch(`${BASE_URL}/register`, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      nickname,\n      username,\n      password,\n    }),\n  }).then((res) => res.json());\n};\n\nexport const postArticle = (title, body) => {\n  const token = getAuthToken();\n  return fetch(`${BASE_URL}/posts`, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify({\n      title,\n      body,\n    }),\n  }).then((res) => res.json());\n};\n\nexport const updateArticle = (title, body, id) => {\n    return fetch(`${BASE_URL}/posts/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        title,\n        body,\n      }),\n    }).then((res) => res.json());\n  }\n\nexport const deleteArticle = (id) => {\n  return fetch(`${BASE_URL}/posts/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    }).then((res) => res.json());\n}\n","import { createSlice } from '@reduxjs/toolkit';\nimport { getSinglePage, postArticle, updateArticle, deleteArticle, getLimitPosts } from '../../WepAPI'\n\n\nexport const postReducer = createSlice({\n  name: 'posts',\n  initialState: {\n    isLoadingPost: false,\n    post: {},\n    newPostResponse: null,\n    limit: 5,\n    activePage: 1,\n    allPaginationsNumber: 0,\n  },\n  reducers: {\n    setIsLoadingPost: (state, action) => {\n      state.isLoadingPost = action.payload;\n    },\n    setPost: (state, action) => {\n      state.post = action.payload;\n    },\n    clearPost: (state) => {\n      state.post = {}\n    },\n    setPostResponse: (state, action) => {\n      state.newPostResponse = action.payload;\n    },\n    clearPostResponse: (state) => {\n      state.newPostResponse = null\n    },\n    setActivePage: (state, action) => {\n      state.activePage = action.payload;\n    },\n    setAllPaginationsNumber: (state, action) => {\n      state.allPaginationsNumber = action.payload;\n    }\n  },\n});\n\nexport const { setIsLoadingPost, setPost, clearPost, setPostResponse, clearPostResponse, setIsDelete, setActivePage, setAllPaginationsNumber } = postReducer.actions;\n\nexport const getPost = id => dispatch => {\n  dispatch(setIsLoadingPost(true))\n   return getSinglePage(id).then(res => {\n    dispatch(setPost(res))\n    dispatch(setIsLoadingPost(false))\n    return res\n  }).catch(err => {\n    console.log(err)\n  })\n};\n\nexport const newPost = (title, body) => dispatch => {\n  dispatch(setIsLoadingPost(true))\n  postArticle(title, body).then(res => {\n    dispatch(setPostResponse(res))\n    dispatch(setIsLoadingPost(false))\n  }).catch(err => {\n    console.log(err)\n  })\n}\n\nexport const updatePost = (title, body, id) => dispatch => {\n  updateArticle(title, body, id).then(res => {\n    dispatch(setPostResponse(res))\n  }).catch(err => {\n    console.log(err)\n  })\n}\n\nexport const deletePost = (id) => dispatch => {\n  return deleteArticle(id).then(res => res)\n}\n\nexport const getPosts = (limit, activePage) => dispatch => {\n  getLimitPosts(limit, activePage).then(res => {\n    const totalPostCount = res.headers.get('x-total-count')\n      dispatch(setAllPaginationsNumber(Math.ceil(totalPostCount/limit)))\n      return res.json();\n  }).then(data => {\n    dispatch(setPost(data))\n  }).catch(err => {\n    console.log(err);\n  })\n}\n\nexport default postReducer.reducer;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { deletePost, getPosts } from \"../../redux/reducers/postReducer\";\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useHistory } from \"react-router-dom\"\n\n\nimport { Link } from \"react-router-dom\";\n\nconst PostUpdate = styled(Link)`\n  text-decoration: none;\n  padding: 5px;\n  border: 1px solid rgba(0, 0, 255, 0.6);\n  border-radius: 8px;\n  color: rgba(0, 0, 255, 0.6);\n  margin-right: 5px;\n\n  &:hover{\n    color: rgba(255, 255, 255);\n    background: rgba(0, 0, 255, 0.6);\n    transition: all 0.2s;\n  }\n`\nconst PostDelete = styled.button`\n  background: white;\n  border: 1px solid rgba(255, 0, 0, 0.6);\n  border-radius: 8px;\n  padding: 5px;\n  font-size: 16px;\n  color: rgba(255, 0, 0, 0.6);\n\n  &:hover {\n    color: rgba(255, 255, 255);\n    background: rgba(255, 0, 0, 0.6);\n    transition: all 0.2s;\n  }\n`\nconst PostFeatruesContainer = styled.div``\n\nPostFeatrues.propTypes = {\n  post: PropTypes.object,\n}\n\nfunction PostFeatrues({ post }) {\n  const dispatch = useDispatch()\n  const limit = useSelector(store => store.posts.limit)\n  const activePage = useSelector(store => store.posts.activePage)\n  const history = useHistory()\n  const handleDeletePost = (id) => {\n    dispatch(deletePost(id)).then(() => {\n    dispatch(getPosts(limit, activePage));\n    history.push('/')\n    });\n  }\n\n  return (\n    <PostFeatruesContainer>\n      <PostUpdate to={`/update-post/${post.id}`}>更新</PostUpdate>\n      <PostDelete\n        onClick={() => {\n          handleDeletePost(post.id);\n        }}\n      >\n        刪除\n      </PostDelete>\n    </PostFeatruesContainer>\n  );\n}\n\nexport default PostFeatrues;\n","export const MEDIA_QUERY_MD = \"@media screen and (max-width: 760px)\";\nexport const MEDIA_QUERY_LG = \"@media screen and (max-width: 1000px)\";\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport {  Link } from \"react-router-dom\";\nimport PostFeatrues from \"../../component/PostFeatrues\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getPosts, setActivePage } from \"../../redux/reducers/postReducer\";\nimport { MEDIA_QUERY_MD } from \"../../constants/style\"\n\nconst Root = styled.div`\n  position: relative;\n  width: 80%;\n  margin: 0 auto;\n  margin-top: 10vh;\n`;\n\nconst PostContainer = styled.div`\n  border-bottom: 1px solid rgba(0, 12, 34, 0.2);\n  padding: 16px;\n  display: flex;\n  align-items: flex-end;\n  justify-content: space-between;\n\n`;\n\nconst PostTitle = styled(Link)`\n  font-size: 24px;\n  color: #333;\n  text-decoration: none;\n  max-width: 60vw;\n`;\n\nconst PostDate = styled.div`\n  color: rgba(0, 0, 0, 0.8);\n`;\n\nconst PagesContainer = styled.div`\n  text-align: center;\n  margin-top: 10px;\n`;\n\nconst PagesButton = styled.button`\n  font-size: 24px;\n  background: white;\n  border: none;\n  border-bottom: 1px solid black;\n  cursor: pointer;\n\n  & + & {\n    margin-left: 8px;\n  }\n\n  &:hover {\n    background: rgba(0, 0, 0, 0.6);\n    color: white;\n    border-radius: 8px;\n    transition: all 0.2s;\n  }\n\n  ${(props) =>\n    props.$active &&\n    `\n    background: rgba(0, 0, 0, 0.2);\n    border-radius: 8px;\n    border: none;\n  `}\n`;\n\nconst PostInfo = styled.div``\n\nfunction Post({ post }) {\n  const user = useSelector(store => store.users.user)\n  return (\n    <PostContainer>\n      <PostTitle to={`/posts/${post.id}`}>{post.title}</PostTitle>\n      <PostInfo>\n        {user && <PostFeatrues post={post} />}\n        <PostDate>{new Date(post.createdAt).toLocaleString()}</PostDate>\n      </PostInfo>\n    </PostContainer>\n  );\n}\n\nfunction Pagination({ allPaginationsNumber, activePage, handlePagePagination}) {\n  let arr = [];\n  for (let i = 1; i <= allPaginationsNumber; i++) {\n    arr.push(i);\n  }\n  return arr.map((number) => (\n    <PagesButton\n      key={number}\n      $active={activePage === number}\n      onClick={() => {\n        handlePagePagination(number)\n      }}\n    >\n      {number}\n    </PagesButton>\n  ));\n}\n\nPost.propTypes = {\n  post: PropTypes.object,\n};\n\nexport default function HomePage() {\n  const dispatch = useDispatch()\n  const post = useSelector(store => store.posts.post)\n  const limit = useSelector(store => store.posts.limit)\n  const activePage = useSelector(store => store.posts.activePage)\n  const allPaginationsNumber = useSelector(store => store.posts.allPaginationsNumber)\n\n  const handlePagePagination = (number) => {\n    dispatch(setActivePage(number))\n  }\n\n  useEffect(() => {\n    dispatch(getPosts(limit, activePage))\n  },[dispatch, activePage, limit])\n\n  return (\n    <Root>\n      {post.length && post.map((post) => (\n        <Post key={post.id} post={post} />\n      ))}\n      <PagesContainer>\n        <Pagination\n          allPaginationsNumber={allPaginationsNumber}\n          activePage={activePage}\n          handlePagePagination={handlePagePagination}\n        />\n      </PagesContainer>\n    </Root>\n  );\n}\n","import { createSlice } from '@reduxjs/toolkit';\nimport { register, getMe, login } from '../../WepAPI'\nimport { setAuthToken } from \"../../utilis\";\n\n\n\nexport const userReducer = createSlice({\n  name: 'users',\n  initialState: {\n    isLoadingLogin: false,\n    user: null,\n    registerResponse: null,\n    errorMessage: null,\n  },\n  reducers: {\n    setIsLoadingLogin: (state, action) => {\n      state.isLoadingLogin = action.payload;\n    },\n    setUser: (state, action) => {\n      state.user = action.payload;\n    },\n    setRegisterResponse: (state, action) => {\n      state.registerResponse = action.payload;\n    },\n    setErrorMessage: (state, action) => {\n      state.errorMessage = action.payload;\n    },\n    clearUser: (state) => {\n      state.user = null\n    }\n  },\n});\n\nexport const { setIsLoadingLogin, setUser, setRegisterResponse, setErrorMessage, clearUser } = userReducer.actions;\n\nexport const postRegister = (nickname, username, password) => dispatch => {\n  register(nickname, username, password).then(res => {\n    if(res.ok !== 1) {\n     return dispatch(setErrorMessage(res.message))\n    }\n    setAuthToken(res.token)\n    getMe().then(data => {\n      dispatch(setIsLoadingLogin(true))\n      if(data.ok !== 1) {\n        dispatch(setIsLoadingLogin(false))\n        return dispatch(setErrorMessage(res.message))\n      }\n      dispatch(setUser(data.data))\n      dispatch(setIsLoadingLogin(false))\n    })\n  })\n}\n\nexport const userLogin = (username, password) => dispatch => {\n  login(username, password).then(res => {\n    if(res.ok !== 1) {\n     return dispatch(setErrorMessage(res.message))\n    }\n    setAuthToken(res.token)\n    getMe().then(data => {\n      dispatch(setIsLoadingLogin(true))\n      if(data.ok !== 1) {\n        dispatch(setIsLoadingLogin(false))\n        return dispatch(setErrorMessage(data.message))\n      }\n      dispatch(setUser(data.data))\n      dispatch(setIsLoadingLogin(false))\n    })\n  })\n}\n\n\nexport const getTokenLogin = () => dispatch => {\n  getMe().then(data => {\n    dispatch(setIsLoadingLogin(true))\n      if(data.ok !== 1) {\n        dispatch(setIsLoadingLogin(false))\n        return dispatch(setErrorMessage(data.message))\n      }\n      dispatch(setUser(data.data))\n      dispatch(setIsLoadingLogin(false))\n  })\n}\n\nexport default userReducer.reducer;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector} from \"react-redux\"\nimport { userLogin } from \"../../redux/reducers/userReducer\";\n\nconst ErrorMessage = styled.div`\n  color: red;\n`;\n\nconst Button = styled.button`\n  padding: 10px;\n  background: rgba(0, 0, 255, 0.7);\n  color: rgba(255, 255, 255, 0.9);\n  cursor: pointer;\n\n  &:hover {\n    border-radius: 8px;\n    background: green;\n    transition: all 0.1s;\n  }\n`;\n\nconst LoginContainer = styled.div`\n  margin-top: 10vh;\n`\n\nexport default function LoginPage() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const errorMessage = useSelector(store => store.users.errorMessage)\n  const user = useSelector(store => store.users.user)\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(userLogin(username, password))\n  }\n\n  useEffect(() => {\n    if(user && user.id) {\n      history.push('/')\n    }\n  })\n\n  return (\n    <LoginContainer>\n      <form onSubmit={handleSubmit}>\n        username:{\" \"}\n        <input\n          style={{ marginRight: \"8px\" }}\n          value={username}\n          onChange={(e) => {\n            setUsername(e.target.value);\n          }}\n        />\n        password:{\" \"}\n        <input\n          style={{ marginRight: \"8px\" }}\n          type=\"password\"\n          value={password}\n          onChange={(e) => {\n            setPassword(e.target.value);\n          }}\n        />\n        <Button>登入</Button>\n        {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\n      </form>\n    </LoginContainer>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { useParams } from \"react-router-dom\";\nimport { getPost, clearPost } from '../../redux/reducers/postReducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostFeatrues from \"../../component/PostFeatrues\";\n\n\nconst PostContainer = styled.div`\n  padding: 8px;\n  margin-top: 10vh;\n`;\n\nconst PostTitle = styled.div``;\n\nconst PostContext = styled.div``;\n\nconst Loading = styled.div`\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  right: 0px;\n  bottom: 0px;\n  background: rgba(0, 0, 0, 0.6);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 42px;\n`\n\nfunction SinglePost({ singlePost, isLoading }) {\n  const user = useSelector(store => store.users.user)\n  return (\n    <PostContainer>\n      {isLoading &&  <Loading>Loading ...</Loading>}\n      {user && <PostFeatrues post={singlePost}/>}\n      <PostTitle>{singlePost.title}</PostTitle>\n      <PostContext>{singlePost.body}</PostContext>\n    </PostContainer>\n  );\n}\n\nSinglePost.propTypes = {\n  singlePost: PropTypes.object,\n  isLoading: PropTypes.bool\n};\n\nexport default function SinglePage() {\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const isLoading = useSelector(store => store.posts.isLoadingPost)\n  const post = useSelector(store => store.posts.post)\n\n  useEffect(() => {\n    dispatch(getPost(id))\n  }, [id, dispatch]);\n\n  useEffect(() => { \n    return () => {\n      dispatch(clearPost())\n    }\n  },[dispatch])\n\n  return <SinglePost singlePost={post} isLoading={isLoading}/>;\n}\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector} from \"react-redux\"\nimport { postRegister } from \"../../redux/reducers/userReducer\";\n\nconst ErrorMessage = styled.div`\n  color: red;\n`;\n\nconst Form = styled.form`\n  text-align: center;\n  margin-top: 10vh;\n`;\n\nconst Input = styled.input`\n  margin: 0px 8px;\n  padding: 8px;\n`;\n\nconst InputText = styled.span`\n  background: rgba(255, 0, 0, 0.8);\n  color: rgba(255, 255, 255, 0.9);\n  padding: 10px;\n  border-radius: 8px;\n`;\n\nconst FormSubmit = styled.button`\n  padding: 10px;\n  background: #333;\n  color: rgba(255, 255, 255, 0.9);\n  cursor: pointer;\n\n  &:hover {\n    border-radius: 8px;\n    background: green;\n    transition: all 0.1s;\n  }\n`;\n\nexport default function RegisterPage() {\n  const [nickname, setNickname] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const errorMessage = useSelector(store => store.users.errorMessage)\n  const user = useSelector(store => store.users.user)\n\n  const handleRegisterSubmit = (e) => {\n    e.preventDefault();\n    dispatch(postRegister(nickname, username, password))\n  }\n\n  useEffect(() => {\n    if(user && user.id) {\n      history.push('/')\n    }\n  },[user, history])\n\n  return (\n    <Form onSubmit={handleRegisterSubmit}>\n      <InputText>nickname:</InputText>\n      <Input\n        value={nickname}\n        onChange={(e) => {\n          setNickname(e.target.value);\n        }}\n      />\n      <InputText>username:</InputText>\n      <Input\n        value={username}\n        onChange={(e) => {\n          setUsername(e.target.value);\n        }}\n      />\n      <InputText>password:</InputText>\n      <Input\n        type=\"password\"\n        value={password}\n        onChange={(e) => {\n          setPassword(e.target.value);\n        }}\n      />\n      <FormSubmit>註冊</FormSubmit>\n      {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\n    </Form>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\n\nconst AboutContainer = styled.div`\n  margin: 0 auto;\n  width: 80%;\n  margin-top: 10vh;\n`;\n\nconst AboutTitle = styled.div`\n  text-align: center;\n  font-size: 32px;\n  font-weight: bold;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.5);\n  padding: 10px 0px;\n`;\n\nconst AboutContext = styled.div``;\n\nconst Article = styled.div`\n  position: relative;\n  padding: 10px;\n  font-size: 24px;\n`;\n\nconst Img = styled.img`\n  position: absolute;\n  width: 100%;\n  border-radius: 8px;\n  left: 0px;\n  top: 0px;\n  opacity: 0.2;\n`;\n\nexport default function AboutPage() {\n  return (\n    <AboutContainer>\n      <AboutTitle>關於這個部落格</AboutTitle>\n      <AboutContext>\n        <Article>\n          這是一個練習如何使用 React\n          的簡易部落格，有簡單的登入功能，註冊功能，發表文章，首頁文章列表，點進去能看到單篇文章，首頁分頁功能，做了這些才發現老師說的細節很重要，有各種錯誤狀況要會懂的顯示出來，不過我都想不太到...應該是多去實作或是遇到才會注意到，但有時遇到就來不及了...，利用這些練習藉此來學習\n          React\n          基本使用方法，老師也說明會用了這些再去做延伸相信能應付大部分場面？\n          在此也感謝 Huli\n          老師的耐心地教導讓我學到了很多很多，離求職時間也不遠了，\n          希望能夠一切順利～\n          <Img src=\"https://i.ibb.co/ZgbZ99y/IMG-1753.jpg\" />\n        </Article>\n      </AboutContext>\n    </AboutContainer>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { newPost, clearPostResponse } from \"../../redux/reducers/postReducer\";\nimport { useHistory } from \"react-router-dom\";\n\n\n\nconst ErrorMessage = styled.div`\n  color: red;\n`;\n\nconst PostContainer = styled.div`\n  text-align: center;\n  margin-top: 10vh;\n`;\n\nconst Form = styled.form``;\n\nconst InputTitle = styled.div`\n  margin: 8px 0px;\n  font-size: 32px;\n`;\n\nconst Input = styled.input`\n  padding: 8px;\n  border: none;\n  border-bottom: 1px solid black;\n  outline: none;\n  font-size: 18px;\n`;\n\nconst TextArea = styled.textarea`\n  width: 100%;\n  font-size: 18px;\n  padding: 5px;\n`;\n\nconst SubmitButton = styled.button`\n  background: white;\n  padding: 8px;\n  cursor: pointer;\n  border-radius: 8px;\n\n  &:hover {\n    background: #548c00;\n    color: white;\n  }\n`;\n\nexport default function NewPostPage() {\n  const [title, setTitle] = useState(\"\");\n  const [textArea, setTextArea] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(null)\n  const dispatch = useDispatch();\n  const history = useHistory()\n  const newPostResponse = useSelector(store => store.posts.newPostResponse)\n  const isLoadingPost = useSelector(store => store.posts.isLoadingPost)\n  \n\n  const handlePostPageSubmit = () => {\n    dispatch(newPost(title, textArea))\n  };\n\n  useEffect(() => {\n    if(newPostResponse) {\n      if(newPostResponse.ok === 0) {\n        return setErrorMessage(newPostResponse.message)\n      }\n      history.push(`/posts/${newPostResponse.id}`)\n    }\n  }, [newPostResponse, history])\n\n  useEffect(() => {\n    return () => {\n      dispatch(clearPostResponse())\n    }\n  })\n\n  return (\n    <PostContainer>\n      <Form onSubmit={handlePostPageSubmit}>\n        <InputTitle>\n          <Input\n            placeholder=\"Title\"\n            value={title}\n            onChange={(e) => {\n              setTitle(e.target.value);\n            }}\n          />\n        </InputTitle>\n        <TextArea\n          rows=\"10\"\n          value={textArea}\n          onChange={(e) => {\n            setTextArea(e.target.value);\n          }}\n        />\n        {!isLoadingPost && <SubmitButton>發布文章</SubmitButton>}\n        {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\n      </Form>\n    </PostContainer>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { getPost, clearPost, updatePost, clearPostResponse } from '../../redux/reducers/postReducer';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst PostContainer = styled.div`\n  text-align: center;\n`;\n\nconst PostTitle = styled.input`\n  margin: 8px 0px;\n  font-size: 32px;\n  padding: 8px;\n  border: none;\n  border-bottom: 1px solid black;\n  outline: none;\n  font-size: 18px;\n`;\n\nconst PostContext = styled.textarea`\n  width: 100%;\n  font-size: 18px;\n  padding: 5px;\n`;\n\nconst Loading = styled.div`\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  right: 0px;\n  bottom: 0px;\n  background: rgba(0, 0, 0, 0.6);\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 42px;\n`\n\nconst Form = styled.form``\n\nconst SubmitButton = styled.button`\n  padding: 0px 20px;\n  background: white;\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 24px;\n\n  &:hover {\n    background: #333;\n    color: white;\n  }\n`\n\nfunction UpdatePost({ singlePost, isLoading, title, setTitle, textArea, setTextArea, handleUpdateSubmit }) {\n  return (\n    <PostContainer>\n      {isLoading && <Loading>Loading ...</Loading>}\n      <Form onSubmit={handleUpdateSubmit}>\n        <PostTitle\n          placeholder={'title'}\n          value={title}\n          onChange={(e) => {\n            setTitle(e.target.value);\n          }}\n        />\n        <PostContext\n          value={textArea}\n          rows=\"10\"\n          onChange={(e) => {\n            setTextArea(e.target.value);\n          }}\n        />\n        <SubmitButton>更新</SubmitButton>\n      </Form>\n    </PostContainer>\n  );\n}\n\nUpdatePost.propTypes = {\n  singlePost: PropTypes.object,\n  isLoading: PropTypes.bool,\n  title: PropTypes.string,\n  setTitle: PropTypes.func,\n  textArea: PropTypes.string,\n  setTextArea: PropTypes.func,\n  handleUpdateSubmit: PropTypes.func,\n};\n\nexport default function UpdatePage() {\n  const [title, setTitle] = useState('');\n  const [textArea, setTextArea] = useState('');\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const isLoading = useSelector(store => store.posts.isLoadingPost)\n  const post = useSelector(store => store.posts.post)\n  const newPostResponse = useSelector(store => store.posts.newPostResponse)\n\n  const handleUpdateSubmit = () => {\n    dispatch(updatePost(title, textArea, id))\n  }\n\n  useEffect(() => {\n    dispatch(getPost(id)).then(post => {\n      setTitle(post.title)\n      setTextArea(post.body)\n    })\n  }, [id, dispatch]);\n\n  useEffect(() => {\n    if(newPostResponse) {\n      history.push(`/posts/${newPostResponse.id}`)\n    }\n  })\n\n  useEffect(() => { \n    return () => {\n      dispatch(clearPost())\n      dispatch(clearPostResponse())\n    }\n  },[dispatch])\n\n  return <UpdatePost singlePost={post} isLoading={isLoading} title={title} setTitle={setTitle} textArea={textArea} setTextArea={setTextArea} handleUpdateSubmit={handleUpdateSubmit}/>;\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { setAuthToken } from \"../../utilis\";\nimport { useDispatch, useSelector} from \"react-redux\"\nimport { clearUser } from \"../../redux/reducers/userReducer\";\nimport { MEDIA_QUERY_MD } from \"../../constants/style\"\nimport { Link, useLocation, useHistory } from \"react-router-dom\";\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.2);\n  padding: 0px 32px;\n  background: rgba(255, 255, 255, 1);\n  z-index: 2;\n\n  ${MEDIA_QUERY_MD} {\n    \n  }\n`;\n\nconst Board = styled.h1`\n  ${MEDIA_QUERY_MD} {\n    margin: 0px;\n  }\n`;\n\nconst NavbarList = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst Nav = styled(Link)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  margin-left: 8px;\n  padding: 10px;\n  cursor: pointer;\n  color: black;\n  text-decoration: none;\n\n  ${(props) =>\n    props.$active &&\n    `\n    background: rgba(0, 0, 0, 0.2);\n    border-radius: 8px;\n  `}\n  &:hover {\n    color: red;\n  }\n`;\n\nconst Logout = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  margin-left: 8px;\n  padding: 10px;\n  cursor: pointer;\n  color: black;\n  text-decoration: none;\n  background: rgba(255, 255, 255, 1);\n  border: none;\n  font-size: 16px;\n\n  &:hover {\n    color: red;\n  }\n`;\n\nconst LeftContainer = styled.div`\n  display: flex;\n  align-items: center;\n\n  ${MEDIA_QUERY_MD} {\n    flex-direction: column;\n  }\n`;\n\nfunction Header() {\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const user = useSelector(store => store.users.user)\n  const history = useHistory();\n\n  const handleLogout = () => {\n    setAuthToken(\"\");\n    dispatch(clearUser());\n    if (location.pathname !== \"/\") {\n      history.push(\"/\");\n    }\n  }\n\n  return (\n    <HeaderContainer>\n      <LeftContainer>\n        <Board>我的第一個部落格</Board>\n        <NavbarList>\n          <Nav to=\"/\" $active={location.pathname === \"/\"}>\n            首頁\n          </Nav>\n          <Nav to=\"/about\" $active={location.pathname === \"/about\"}>\n            關於這個部落格\n          </Nav>\n          {user && (\n            <Nav to=\"/new-post\" $active={location.pathname === \"/new-post\"}> 發布文章 </Nav>\n          )}\n        </NavbarList>\n      </LeftContainer>\n      <NavbarList>\n        {user ? (\n        <Logout onClick={handleLogout}>登出</Logout>\n        ) : (\n          <>\n            <Nav to=\"/login\" $active={location.pathname === \"/login\"}>登入</Nav>\n            <Nav to=\"/register\" $active={location.pathname === \"/register\"}>註冊</Nav>\n          </>\n        )}\n      </NavbarList>\n    </HeaderContainer>\n  );\n}\n\nexport default Header;\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport HomePage from \"../../pages/HomePage\";\nimport LoginPage from \"../../pages/LoginPage\";\nimport PostPage from \"../../pages/SinglePage\";\nimport RegisterPage from \"../../pages/RegisterPage\";\nimport AboutPage from \"../../pages/AboutPage\";\nimport NewPostPage from \"../../pages/NewPostPage\";\nimport UpdatePostPage from \"../../pages/UpdatePostPage\"\nimport Header from \"../Header\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { getAuthToken } from \"../../utilis\";\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { getTokenLogin } from \"../../redux/reducers/userReducer\"\n\nconst Root = styled.div`\n  padding-top: 64px;\n`;\n\nfunction App() {\n  const isLoadingLogin = useSelector(store => store.users.isLoadingLogin)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    if (getAuthToken() !== \"\") {\n      dispatch(getTokenLogin())\n    }\n  },[dispatch])\n\n  return (\n      <Root>\n        <Router>\n          {!isLoadingLogin && <Header />}\n          <Switch>\n            <Route exact path=\"/\">\n              <HomePage />\n            </Route>\n            <Route path=\"/login\">\n              <LoginPage />\n            </Route>\n            <Route path=\"/posts/:id\">\n              <PostPage />\n            </Route>\n            <Route path=\"/register\">\n              <RegisterPage />\n            </Route>\n            <Route path=\"/about\">\n              <AboutPage />\n            </Route>\n            <Route path=\"/new-post\">\n              <NewPostPage />\n            </Route>\n            <Route path=\"/update-post/:id\">\n              <UpdatePostPage />\n            </Route>\n          </Switch>\n        </Router>\n      </Root>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport postReducer from './reducers/postReducer';\nimport userReducer from './reducers/userReducer';\n\nexport default configureStore({\n  reducer: {\n    posts: postReducer,\n    users: userReducer,\n  },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./component/App\";\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nconst theme = {\n  colors: {\n    primary_green: \"#00AA00\",\n    primary_red: \"#FF0000\",\n    primary_white: \"#FFFFFF\",\n  },\n};\n\nReactDOM.render(\n  <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}